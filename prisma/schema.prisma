// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl", "debian-openssl-1.1.x"]
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
}

generator kysely {
  provider = "prisma-kysely"
  output   = "../generated/kysely"
  fileName = "types.ts"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

enum Role {
  USER
  ADMIN
}

enum FilterMode {
  Global
  Project
  User
}

enum StateType {
  NotStarted
  InProgress
  Completed
  Failed
  Canceled
}

enum DateType {
  Strict
  Quarter
  Year
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  password                 String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  active        Boolean   @default(true)
  nickname      String?   @unique
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  invites       Ghost[]   @relation("invite")
  host          User?     @relation("invited", fields: [hostId], references: [id])
  hostId        String?
  invited       User[]    @relation("invited")
  invitedAt     DateTime?
  activity      Activity? @relation(fields: [activityId], references: [id])
  activityId    String?   @unique

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
}

model Ghost {
  id       String    @id @default(cuid())
  email    String    @unique
  host     User      @relation("invite", fields: [hostId], references: [id])
  hostId   String
  activity Activity?

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt

  @@index([hostId])
}

model Activity {
  id                 String                @id @default(cuid())
  ghost              Ghost?                @relation(fields: [ghostId], references: [id])
  ghostId            String?               @unique
  user               User?
  filters            Filter[]
  comments           Comment[]
  reactions          Reaction[]
  projects           Project[]
  projectParticipant Project[]             @relation("projectParticipants")
  projectAccess      Project[]             @relation("projectAccess")
  goalParticipant    Goal[]                @relation("goalParticipants")
  goalWatchers       Goal[]                @relation("goalWatchers")
  goalStargizers     Goal[]                @relation("goalStargizers")
  projectWatchers    Project[]             @relation("projectWatchers")
  projectStargizers  Project[]             @relation("projectStargizers")
  filterStargizers   Filter[]              @relation("filterStargizers")
  goalOwner          Goal[]                @relation("goalOwner")
  goalIssuer         Goal[]                @relation("goalIssuer")
  settings           Settings              @relation(fields: [settingsId], references: [id])
  settingsId         String                @unique
  tags               Tag[]
  goalActions        GoalHistory[]         @relation("goalActions")
  criterion          GoalAchieveCriteria[]
  goalRanks          GoalRank[]
  releasesRead       Release[]             @relation("releasesRead")
  releasesDelayed    Release[]             @relation("releasesDelayed")

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt

  @@index([ghostId])
}

model Project {
  id           String     @id
  title        String
  description  String?
  parent       Project[]  @relation("parentChildren")
  children     Project[]  @relation("parentChildren")
  activity     Activity   @relation(fields: [activityId], references: [id])
  activityId   String
  participants Activity[] @relation("projectParticipants")
  accessUsers  Activity[] @relation("projectAccess")
  goals        Goal[]     @relation("projectGoals")
  flow         Flow       @relation(fields: [flowId], references: [id])
  flowId       String
  tags         Tag[]
  watchers     Activity[] @relation("projectWatchers")
  stargizers   Activity[] @relation("projectStargizers")
  averageScore Int?
  personal     Boolean?   @default(false)
  archived     Boolean?   @default(false)
  sharedGoals  Goal[]     @relation("partnershipProjects")
  teams        Team[]     @relation("projects")

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
}

model Priority {
  id      String  @id @default(cuid())
  title   String
  value   Int
  default Boolean @default(false)
  Goal    Goal[]
}

model Goal {
  id                 String                @id @default(cuid())
  scopeId            Int                   @default(1)
  title              String
  description        String
  kind               String?
  key                Boolean?
  personal           Boolean?
  private            Boolean?
  archived           Boolean?              @default(false)
  priority           Priority?             @relation(fields: [priorityId], references: [id])
  priorityId         String?
  estimate           DateTime?
  estimateType       DateType?
  project            Project?              @relation("projectGoals", fields: [projectId], references: [id])
  projectId          String?
  teamId             String?
  state              State?                @relation("goalState", fields: [stateId], references: [id])
  stateId            String?
  activity           Activity?             @relation("goalIssuer", fields: [activityId], references: [id])
  activityId         String?
  owner              Activity?             @relation("goalOwner", fields: [ownerId], references: [id])
  ownerId            String?
  participants       Activity[]            @relation("goalParticipants")
  watchers           Activity[]            @relation("goalWatchers")
  stargizers         Activity[]            @relation("goalStargizers")
  comments           Comment[]
  reactions          Reaction[]
  tags               Tag[]
  dependsOn          Goal[]                @relation("dependsOn")
  blocks             Goal[]                @relation("dependsOn")
  relatedTo          Goal[]                @relation("connected")
  connected          Goal[]                @relation("connected")
  history            GoalHistory[]
  goalAchiveCriteria GoalAchieveCriteria[] @relation("GoalCriterion")
  goalInCriteria     GoalAchieveCriteria[] @relation("GoalInCriteria")
  ranks              GoalRank[]

  completedCriteriaWeight Int?
  partnershipProjects     Project[] @relation("partnershipProjects")

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt

  @@unique([projectId, scopeId])
  @@index([ownerId])
  @@index([activityId])
}

model Filter {
  id          String     @id @default(cuid())
  mode        FilterMode
  title       String
  description String?
  params      String
  default     Boolean    @default(false)
  activity    Activity?  @relation(fields: [activityId], references: [id])
  activityId  String?
  stargizers  Activity[] @relation("filterStargizers")

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
}

model Comment {
  id          String     @id @default(cuid())
  description String
  activity    Activity   @relation(fields: [activityId], references: [id])
  activityId  String
  goal        Goal       @relation(fields: [goalId], references: [id], onDelete: Cascade)
  goalId      String
  state       State?     @relation(fields: [stateId], references: [id])
  stateId     String?
  reactions   Reaction[]

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt

  @@index([activityId])
  @@index([goalId])
}

model Reaction {
  id         String   @id @default(cuid())
  emoji      String
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId String
  goal       Goal?    @relation(fields: [goalId], references: [id], onDelete: Cascade)
  goalId     String?
  comment    Comment? @relation(fields: [commentId], references: [id])
  commentId  String?

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt

  @@unique([emoji, commentId, activityId])
  @@index([activityId])
  @@index([goalId])
  @@index([commentId])
}

model Flow {
  id          String     @id @default(cuid())
  title       String     @unique
  graph       String? // [[stateId, stateId], [stateId, stateId]] — any transition allowed if undefined
  settings    Settings[]
  projects    Project[]
  states      State[]
  recommended Boolean?

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
}

model State {
  id       String    @id @default(cuid())
  title    String    @unique
  type     StateType
  flows    Flow[]
  default  Boolean?
  order    Int       @default(autoincrement())
  hue      Int       @default(1)
  goals    Goal[]    @relation("goalState")
  comments Comment[]

  lightForeground String?
  lightBackground String?

  darkForeground String?
  darkBackground String?

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
}

model Settings {
  id                String    @id @default(cuid())
  theme             String    @default("system")
  beta              Boolean   @default(true)
  flow              Flow?     @relation(fields: [flowId], references: [id])
  flowId            String?
  activity          Activity?
  locale            String    @default("en")
  enableEmailNotify Boolean   @default(true)

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
}

model Tag {
  id          String    @id @default(cuid())
  title       String    @unique
  description String?
  goals       Goal[]
  project     Project[]
  activity    Activity  @relation(fields: [activityId], references: [id])
  activityId  String

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
}

model Job {
  id       String  @id @default(cuid())
  state    String
  priority Int     @default(0)
  kind     String
  data     Json
  delay    Int?
  retry    Int?
  runs     Int     @default(0)
  force    Boolean @default(false)
  cron     String?
  error    String?

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
}

model GoalHistory {
  id            String   @id @default(cuid())
  goal          Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)
  goalId        String
  subject       String
  action        String
  previousValue String?
  nextValue     String?
  activity      Activity @relation("goalActions", fields: [activityId], references: [id])
  activityId    String

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()

  @@index([id])
  @@index([goalId])
}

model GoalAchieveCriteria {
  id             String        @id @default(cuid())
  goal           Goal          @relation("GoalCriterion", fields: [goalId], references: [id], onDelete: Cascade)
  goalId         String
  title          String
  weight         Int
  isDone         Boolean       @default(false)
  activity       Activity      @relation(fields: [activityId], references: [id])
  activityId     String
  deleted        Boolean?
  criteriaGoalId String?
  criteriaGoal   Goal?         @relation("GoalInCriteria", fields: [criteriaGoalId], references: [id], onDelete: Cascade)
  externalTaskId String?
  externalTask   ExternalTask? @relation("taskToCriteria", fields: [externalTaskId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt

  @@index([title])
  @@index([goalId])
}

model Release {
  id       String     @id @default(cuid())
  version  String     @unique
  readers  Activity[] @relation("releasesRead")
  delayers Activity[] @relation("releasesDelayed")

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
}

model Team {
  id             String    @id @default(cuid())
  externalTeamId String    @unique
  projects       Project[] @relation("projects")
}

model AppConfig {
  id      String  @id @default(cuid())
  favicon String?
  logo    String?

  supportLink  String?
  documentLink String?
}

model ExternalTask {
  id                String                @id @default(dbgenerated("gen_random_uuid()"))
  title             String
  externalId        String
  externalKey       String
  project           String
  projectId         String
  type              String
  typeId            String
  typeIconUrl       String
  state             String
  stateId           String
  stateIconUrl      String
  stateColor        String?
  stateCategoryId   Int
  stateCategoryName String
  ownerEmail        String?
  ownerName         String?
  ownerId           String?
  creatorEmail      String?
  creatorName       String?
  creatorId         String?
  assigneeEmail     String?
  assigneeName      String?
  assigneeId        String?
  resolution        String?
  resolutionId      String?
  criteria          GoalAchieveCriteria[] @relation("taskToCriteria")

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt

  @@index([externalId])
  @@index([title])
}

model GoalRank {
  id         String    @id @default(dbgenerated("gen_random_uuid()"))
  activity   Activity? @relation(fields: [activityId], references: [id])
  activityId String?
  goal       Goal      @relation(fields: [goalId], references: [id])
  goalId     String

  value Float

  @@index([activityId])
}
